module CIL

lexical syntax
Int = [0-9]+
Name = [a-zA-Z] [a-zA-Z0-9]+
LiberalString = [a-zA-Z0-9 \[\]\.\<\>\`\!]+
context-free start-symbols
	Test

context-free syntax
  
	Test.ProgramCil				= <
.assembly extern FSharp.Core
{
  .ver 4:0:0:0
  .publickeytoken = (B0 3F 5F 7F 11 D5 0A 3A)
}
.assembly 'test1' { }

.module test1.exe

.class public auto ansi abstract sealed Test1 extends [mscorlib]System.Object
{
  .method public static specialname default int32 main_entrypoint () cil managed 
  {
    .maxstack 8
    ldsfld int32 '\<StartupCode$test1\>.$Test1'::main@226
    ret 
  } 
  .property int32 main ()
  {
    .get default int32 Test1::main_entrypoint () 
  }

  <{Definition "\n"}*>
}

.namespace '\<StartupCode$test1\>'
{
  .class private auto ansi abstract sealed $Test1 extends [mscorlib]System.Object
  {
    .field  assembly static  int32 main@226
    .field  assembly static  int32 init@

    .method public static  default void main@ () cil managed 
    {
      .entrypoint
      .maxstack 1024
      .locals init
      (
        int32 V_0,
        class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2\<int32, class [FSharp.Core]Microsoft.FSharp.Core.Unit\> V_1,
        int32 V_2
      )

      ldstr "%A"
      newobj instance void class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`5\<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2\<int32, class [FSharp.Core]Microsoft.FSharp.Core.Unit\>, class [mscorlib]System.IO.TextWriter, class [FSharp.Core]Microsoft.FSharp.Core.Unit, class [FSharp.Core]Microsoft.FSharp.Core.Unit, int32\>::'.ctor'(string)
      call !!0 class [FSharp.Core]Microsoft.FSharp.Core.ExtraTopLevelOperators::PrintFormatLine\<class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2\<int32,class [FSharp.Core]Microsoft.FSharp.Core.Unit\>\> (class [FSharp.Core]Microsoft.FSharp.Core.PrintfFormat`4\<!!0,class [mscorlib]System.IO.TextWriter,class [FSharp.Core]Microsoft.FSharp.Core.Unit,class [FSharp.Core]Microsoft.FSharp.Core.Unit\>)
      call int32 class Test1::<Name>()
      callvirt instance !1 class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2\<int32, class [FSharp.Core]Microsoft.FSharp.Core.Unit\>::Invoke(!0)
      pop 
      ldc.i4.0 
      dup 
      stsfld int32 '\<StartupCode$test1\>.$Test1'::main@226
      stloc.0 
      ret 
    }
  }
}
>



Definition.Method = <
.method public <MethodType> default <Typ> <Name> <GenericTypeIndicator?> ( <{Typ ","}*> )  cil managed 
{
	.custom instance void class [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::'.ctor'() =  (01 00 00 00 )
	.maxstack 1024
	<LocalDefs>
	<{Instruction "\n"}*>
	ret
}
>

Definition.Class = <
.class nested assembly auto ansi serializable beforefieldinit <Name> <GenericTypeIndicator?> <BaseClass>
{

  <{Field "\n"}*> 

  <Ctor>

  <{Definition "\n"}*>
}
>


LocalDefs.LocalDefs = <.locals init (
	<{Typ ","}*>
)>

Field.Field = <.field  public  <Typ> <Name>>
Param.Param = <<Typ> <Name>>

Ctor.Ctor = <.method assembly specialname rtspecialname instance default void '.ctor' (<{Param ","}*>)  cil managed
{
  .maxstack 1024
  <{Instruction "\n"}*>
  ret
}>

GenericTypeIndicator.GenericTypeIndicator = <\<<{Typ ","}+>\>>

BaseClass.BaseClass = <extends <Typ>>
BaseClass.NoBaseClass = <>

CallType.Static = <>
CallType.Instance = <instance>

MethodType.StaticMethod = <static>
MethodType.InstanceMethod = <virtual instance>

Typ.ClassType = <class <Module><ClassName><GenericClassTypeArgs>>
Typ.ArgType2 = <!!<Int>>
Typ.ArgType1 = <!<Int>>
Typ.IntType = <int32>
Typ.BoolType = <bool>
Typ.StringType = <string>

ClassName.ClassName = <<LiberalString>>

Module.Module = <[<LiberalString>]>
Module.DefaultModule = <>
GenericClassTypeArgs.GenericClassTypeArgs = <`<Int>\<<{Typ ","}+>\>>
GenericClassTypeArgs.NonGeneric = <>

Instruction.CastClass = <castclass <Typ>>
Instruction.LoadArg = <ldarg.<Int>>
Instruction.LoadLocal = <ldloc.<Int>>
Instruction.StoreLocal = <stloc.<Int>>
Instruction.StoreField = <stfld <Typ> <Typ>::<Name>>
Instruction.LoadField = <ldfld <Typ> <Typ>::<Name>>
Instruction.NewObj = <newobj instance void <Typ>::'.ctor'( <{Typ ","}*> )>
Instruction.Call = <call <CallType> <Typ> <Typ>::<Name><GenericTypeIndicator?>( <{Typ ","}*> )>
Instruction.LoadString = <ldstr "<LiberalString>">
Instruction.Throw = <throw>
Instruction.CallVirt = <callvirt instance !1 <Typ>::Invoke(!0)>
Instruction.CallConstructor = <call instance void <Typ>::'.ctor'()>
Instruction.Ldc = <ldc.i4 <Int>>
Instruction.Mul = <mul>
Instruction.Add = <add>
Instruction.Sub = <sub>
Instruction.Div = <div>
Instruction.Neg = <neg>
Instruction.Ret = <ret>
Instruction.Pop = <pop>
Instruction.Dup = <dup>
Instruction.And = <and>
Instruction.Or = <or>
Instruction.Ceq = <ceq>
Instruction.Clt = <clt>
Instruction.Br = <br <LabelRef>>
Instruction.Bne = <bne.un <LabelRef>>
Instruction.Bgt = <bgt.un <LabelRef>>
Instruction.Blt = <blt.un <LabelRef>>
Instruction.Beq = <beq <LabelRef>>
Instruction.BrFalse = <brfalse <LabelRef>>
Instruction.Label = <<Name>: >

LabelRef.LabelRef = <<Name>>
