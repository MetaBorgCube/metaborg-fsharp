module desugar

imports
	src-gen/signatures/minifsharp-sig

signature
sorts

	BinaryOperation	BinaryOperand
	UnaryOperation	UnaryOperand
	PatternTuple	TypeTuple 		ExpTuple

constructors

	// Binary Operations

	BinaryOperation				: BinaryOperand * Expression * Expression -> Expression


	PlusOp						: BinaryOperand
	MinOp						: BinaryOperand
	MultOp						: BinaryOperand
	ConcatOp					: BinaryOperand
	AndOp						: BinaryOperand
	OrOp						: BinaryOperand
	EqualOp						: BinaryOperand
	SmallerOp					: BinaryOperand
	SmallerEqualOp				: BinaryOperand

	// Unary Operations

	UnaryOperation				: UnaryOperand * Expression -> Expression

	NegativeOp					: BinaryOperand
	NotOp						: BinaryOperand

	// Tuple

	PatternTuple				: PatternTuple -> Pattern
	TypeTuple					: TypeTuple -> Type
	ExpTuple					: ExpTuple -> Expression

rules

	// Binary Operations

	desugar: Plus(a, b)					-> BinaryOperation(PlusOp(), a, b)
	desugar: Min(a, b)					-> BinaryOperation(MinOp(), a, b)
	desugar: Mult(a, b)					-> BinaryOperation(MultOp(), a, b)
	desugar: Concat(a, b)				-> BinaryOperation(ConcatOp(), a, b)
	desugar: And(a, b)					-> BinaryOperation(AndOp(), a, b)
	desugar: Or(a, b)					-> BinaryOperation(OrOp(), a, b)
	desugar: Equal(a, b)				-> BinaryOperation(EqualOp(), a, b)
	desugar: NotEqual(a, b)				-> UnaryOperation(NotOp(), BinaryOperation(OrOp(), a, b))
	desugar: Smaller(a, b)				-> BinaryOperation(SmallerOp(), a, b)
	desugar: Greater(a, b)				-> BinaryOperation(SmallerOp(), b, a)
	desugar: SmallerEqual(a, b)			-> BinaryOperation(SmallerEqualOp(), a, b)
	desugar: GreaterEqual(a, b)			-> BinaryOperation(SmallerEqualOp(), b, a)
	
	// If Expressions

	desugar: If(condition, then, else)	-> Match(condition,	[ Rule(Const(Bool(True())), then)
							                  				, Rule(Const(Bool(False())), else)])
	
	// Unary Operations

	desugar: Negative(a)				-> UnaryOperation(NegativeOp(), a)
	desugar: Not(a)						-> UnaryOperation(NotOp(), a)

	// Match Rules

	desugar: Rules(a, b)				-> <concat> [[a], b]
	desugar: RulesEscaped(a, b)			-> <concat> [[a], b]
	desugar: RuleFirst(a, b)			-> Rule(a, b)
	
	// Let Expressions
	
	desugar: LetExp(a @ LetConst(_, _, _))	-> a
	desugar: LetExp(a @ LetRec(_, _, _, _))	-> a
	desugar: LetExp(a @ Let(_, _, _, _))	-> a
	
	// Tuple

	desugar: OuterPatternTuple(RawPatternTuple(a,b)) 		-> PatternTuple(<concat> [[a], b])
	desugar: NestedPatternTuple(RawPatternTuple(a,b)) 		-> PatternTuple(<concat> [[a], b])
	desugar: OuterTypeTuple(RawTypeTuple(a,b)) 				-> TypeTuple(<concat> [[a], b])
	desugar: NestedTypeTuple(RawTypeTuple(a,b)) 			-> TypeTuple(<concat> [[a], b])
	desugar: OuterExpTuple(RawExpTuple(a,b)) 				-> ExpTuple(<concat> [[a], b])
	desugar: NestedExpTuple(RawExpTuple(a,b)) 				-> ExpTuple(<concat> [[a], b])
