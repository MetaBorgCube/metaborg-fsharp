module compile

imports

  libstratego-gpp
  libspoofax/stratego/debug
  src-gen/signatures/-
  nabl2/api
  trans/pp
  trans/desugar
  trans/minifsharp
  src-gen/nabl2/static-semantics
  

rules

	
	show-cil: (selected, _, ast, path, project-path) -> (filename, result) with
	    filename := <guarantee-extension(|$[cil])> path;
	      a         := <nabl2-get-ast-analysis; debug1> ast;
		result := <debug0; desugar-all; program-to-cil; pp-debug> ast

	program-to-cil: Program(e,l@Let(a,b,c,d)) -> ProgramCil(<concat> [[Method("int32", a, None(), [], <program-to-cil> (d, l))], <nonEntryPoints-to-cil> e], a)
		
	nonEntryPoints-to-cil: None() -> []
	nonEntryPoints-to-cil: Some(x) -> <listifyExprBlock; map(let-to-cil); concat> x
	
	
	
// Application	
	
	// first application: a is an identifier, hence need to call constructor with free vars as parameters
	program-to-cil: (z@Application(a@Identifier(name),b), func) -> result with
		funTy := <nabl2-get-ast-type;strip-forall> a;
		node         := <nabl2-get-ast-analysis> name;
		ref-occ      := <nabl2-mk-occurrence(|"Funcs")> name;
		dec-occ      := <nabl2-get-resolved-name(|node); Fst> ref-occ;
		targetFunc   := <nabl2-get-type(|node)> dec-occ;
		freeVars     := <getFreeVars> ([], targetFunc);
		freeVarTys   := <map(nabl2-get-ast-type)> freeVars;
		loadFreeVars := <mapconcat(\x->(x, func)\;program-to-cil)> freeVars;
		callCtor     := [NewObj(<concat-strings> [name, "_0"], <map(type-to-cil)> freeVarTys)];
		loadArg      := <program-to-cil> (b, func);
		invokeFunc   := [CallVirt(<type-to-cil> funTy)];
		result       :=  <concat> [
			loadFreeVars, 
			callCtor, 
			loadArg, 
			invokeFunc
		]
	
	// not the first application: a is not an identifier, hence no need to call constructor with free vars as parameters
	program-to-cil: (z@Application(a,b), func) -> result with
		funTy := <nabl2-get-ast-type;strip-forall> a;
		result :=  <debug2;concat> [<debug0;program-to-cil;debug1> (a, func), <debugq;program-to-cil;debugw> (b, func), [CallVirt(<type-to-cil> funTy)]]
	

// Type related stuff	
	
	type-to-cil: Forall(_, y)  -> <debugk;type-to-cil;debugl> y
	type-to-cil: Function(x,y) -> <concat-strings> ["class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<", <type-to-cil> x, ",", <type-to-cil> y, ">"]
	type-to-cil: Int()         -> "int32"
	type-to-cil: Bool()        -> "bool"
	type-to-cil: Tuple(x)      -> <concat-strings> ["class [mscorlib]System.Tuple`", <length;int-to-string>x, "<", <separate-by;concat-strings> (",", <map(type-to-cil)> x), ">"]
	type-to-cil: List(x)       -> <concat-strings> ["class [FSharp.Core]Microsoft.FSharp.Collections.FSharpList`1<", <type-to-cil> x, ">"]
	type-to-cil: TVar(x)       -> <concat-strings> ["!!", x]
	
	arg-type-to-cil: (Forall(_,x), argName, args) -> <arg-type-to-cil> (x, argName, args)
	arg-type-to-cil: (Function(x,y), argName, [ArgIdentifier(argName) | _]) -> <type-to-cil> x
	arg-type-to-cil: (Function(x,y), argName, [TypedArgIdentifier(argName,_) | _]) -> <type-to-cil> x
	arg-type-to-cil: (Function(x,y), argName, [_ | argTl]) -> <arg-type-to-cil> (y, argName, argTl)
	
	ret-type-to-cil: Function(x,y) -> <ret-type-to-cil> y
	ret-type-to-cil: x -> <type-to-cil> x
	
	sort-typevars: x -> <sort-list(LSort(\(a,b) -> <gtS>(<string-replace(|"T","")> a, <string-replace(|"T","")> b)\))> x
	getGenericVarList: x -> <collect-all(?TVar(_));map(\TVar(z) -> z\); sort-typevars> x
	genericVarListToOption: [] -> None()
	genericVarListToOption: x -> Some(GenericTypeIndicator(x))
	getOptionalGenericVars: x -> <getGenericVarList; genericVarListToOption> x
	
	strip-forall: Forall(x,y) -> y
	strip-forall: x -> x
	
	
// Misc cil-generation

	program-to-cil: (ExprBlock(exp, None()), func) -> <program-to-cil> (exp, func)
	program-to-cil: (ExprBlock(exp, Some(next)), func) -> <concat> [<program-to-cil> (exp, func), <program-to-cil> (next, func)]
	
	program-to-cil: (Const(Integer(x)), func) -> [Ldc(x)]
	
	program-to-cil: (BinaryOperation(op, a, b), func) -> <concat> [<program-to-cil> (a, func), <program-to-cil> (b, func), <binop-to-cil> op]
	binop-to-cil: PlusOp() -> [Add()]
	binop-to-cil: MinOp()  -> [Sub()]
	binop-to-cil: MultOp() -> [Mul()]	
	
	program-to-cil: (v@Identifier(name), func) -> [LoadArg(<getArg;int-to-string> (v,func))]
		
		
		
		
		
		
		
		
		
		
	getLetArgs: Let   (_, args, _, _) -> args
	getLetArgs: LetRec(_, args, _, _) -> args

	// returns index of the identifier in the sequence [param1, ..., paramn, freeVar1, ..., freeVarn] 
	getArg: (identifier, func) -> result with
		freeVars   := <getFreeVars> ([], func);
		freeVarIdx := <getIdentifierIndex> (freeVars, identifier);
		paramIndex := <getIdentifierIndex> (<getLetArgs>func, identifier);
		numParams  := <getLetArgs;length> func;
		if <lt> (freeVarIdx, 0) then result := paramIndex else  result := <add> (numParams, freeVarIdx) end


	

	program-to-cil: (Let(_,_,_,_), func) -> [] // required for nested lets; can't have a function definition in a function body
	
	let-to-cil: a @ Let(name,args,retTy,body) -> result with 
		tmp 	   	 := <nabl2-get-ast-type; strip-forall; debugq> a;
		returnType 	 := <debug(|"retTy inp: ");ret-type-to-cil;debug(|"retTy out: ")> tmp;
		argTypes 	 := <map(\x -> <debugz;arg-type-to-cil;debugx> (tmp, <getIdentifierName> x, args)\)> args;
		genericTypes := <debug(|"baz: ");getOptionalGenericVars;debug(|"baq: ")> tmp;
		freeVars 	 := <debug(|"baz11: ");getFreeVars;debug(|"baz22: ")> ([], a);
		freeVarTypes := <map(nabl2-get-ast-type; strip-forall; type-to-cil)> freeVars;
		allArgTypes  := <concat>  [argTypes, freeVarTypes];
		method 		 := Method(returnType, name, genericTypes, allArgTypes, <program-to-cil> (body, a)); // todo: add freevar args
//		freeVars 	 := <debug(|"###1 ");getFreeVars; debug(|"###2 ")> ([], a);
		curriedFunc  := <debug4;curriedFunction-to-cil;debug5> (tmp, tmp, name, [], args, freeVars);
		result 	 	 := <concat;debug6> [[method], curriedFunc, <listifyExprBlock;mapconcat(let-to-cil)> body]
	let-to-cil: _ -> []


 
	getIdentifierName: ArgIdentifier(x) -> x
	getIdentifierName: TypedArgIdentifier(x, _) -> x
	getIdentifierName: Identifier(x) -> x
	getIdentifierName: Let(name, _, _, _)    -> name // required for getExprBlockArgs (bit of a dirty hack..)
	getIdentifierName: LetRec(name, _, _, _) -> name // required for getExprBlockArgs
	getIdentifierName: LetConst(name, _, _)  -> name // required for getExprBlockArgs
	
	
	curriedFunction-to-cil: (_, _, _, _, [], freeVars) -> []
	curriedFunction-to-cil: (funTy, ty@Function(x,y), name, processedArgs, nextArgs@[argHd | argTl], freeVars) -> result with
		funcName 	 := <debugc;concat-strings> [name, "_", <length;int-to-string>processedArgs];
		baseClass 	 := <debugd;type-to-cil> ty;
		all_fields   := <concat> [processedArgs, freeVars];
		fields 		 := <debuge;map(generateField)> all_fields;
		ctor 		 := <debugf;generateConstructor> (funcName, processedArgs, baseClass, freeVars);
		retTy 		 := <debugg;type-to-cil> y;
		instructions := <debugh;generateInvokeImplementation> (funTy, name, processedArgs, argTl, freeVars);
		genericVars  := <getOptionalGenericVars> funTy;
		function     := FunctionDefinition(funcName, genericVars, baseClass, fields, ctor, retTy, instructions);
		nextFunction := <debugi;curriedFunction-to-cil> (funTy, y, name, <concat> [processedArgs, [argHd]], argTl, freeVars);
		result 		 := <concat> [[function], nextFunction] 
		
		
	loadArg: (processed, funTy, className, identifierName) -> result with 
		fldType := <debugm;arg-type-to-cil;debugn> (funTy,identifierName, processed);
		result := [LoadArg("0"), LoadField(fldType, className, identifierName)] 
	loadArgs: (processed, funTy, className) -> <mapconcat(\x -> <loadArg> (processed, funTy, className, <getIdentifierName> x)\)> processed

	loadFreeVar: (className, freeVar) -> result with
		ty        := <nabl2-get-ast-type; type-to-cil> freeVar;
		fieldName := <getIdentifierName> freeVar;
		result    := [LoadArg("0"), LoadField(ty, className, fieldName)]
	loadFreeVars: (className, freeVars) -> result with
		result := <debug(|"~~~1 ");mapconcat(\x -> (className, x)\; loadFreeVar; debug(|"~~~1 "))> freeVars
	
	// no more args to process; this is the final call; don't return a new function, but return the function result.
	generateInvokeImplementation: (funTy, className, processed, [], freeVars) -> result with 
//		q := <mapconcat(\x -> [LoadArg("0"), LoadField(<arg-type-to-cil> (funTy,<getIdentifierName>x,processed), <concat-strings> [className, "_", <length;int-to-string> processed], <getIdentifierName>x)] \)> processed;
		objName := <debugo;concat-strings> [className, "_", <length;int-to-string> processed];
		loadCurriedArgs := <loadArgs> (processed, funTy, objName);
		loadFreeVars := <loadFreeVars> (<debugo;concat-strings> [className, "_", <length;int-to-string> processed], freeVars);
//		funcArgs := 
		argTys := <debug(|"@@@3 ");map(\x -> "int32"\)> [Identifier("q") | processed];
		freeVarTys := <debug(|"@@@1 "); map(nabl2-get-ast-type;type-to-cil);debug(|"@@@2 ")> freeVars;
		tys := <concat> [argTys, freeVarTys];
		funcName := <concat-strings> ["get_", className];
		result := <concat> [
			loadCurriedArgs,
			[LoadArg("1")], // load the argument of this invoke
			loadFreeVars,
			[Call(<debug2;ret-type-to-cil> funTy, funcName, tys), Ret()] // hack: add current param
		]
	
	generateInvokeImplementation: (funTy, className, processed, nextArgs, freeVars) -> result with
		objName := <debugo;concat-strings> [className, "_", <length;int-to-string> processed];
		loadCurriedArgs := <loadArgs> (processed, funTy, objName);
		loadFreeVars := <loadFreeVars> (<debugo;concat-strings> [className, "_", <length;int-to-string> processed], freeVars);
		argTys := <debug(|"@@@3 ");map(\x -> "int32"\)> [Identifier("q") | processed];       // todo: remove this dirty hack
		freeVarTys := <debug(|"@@@1 "); map(nabl2-get-ast-type;type-to-cil);debug(|"@@@2 ")> freeVars;
		tys := <concat> [argTys, freeVarTys];
		createObj := NewObj(<concat-strings> [className, "_", <addS> ("1", <length;int-to-string> processed)], tys); 
		result := <concat> [
			loadCurriedArgs,
			[LoadArg("1")],
			loadFreeVars,
			[createObj] 
	 	]
 
 	getCurriedType: (retTy, []) -> "int32"
 	getCurriedType: (retTy, [argTyHd | argTyTl]) -> <concat-strings> ["class [FSharp.Core]Microsoft.FSharp.Core.FSharpFunc`2<int32,", <getCurriedType> (retTy, argTyTl), ">"]
 
 
 	// a field is a param, but named differently..
	generateField: x -> <generateParam; \Param(a,b) -> Field(a,b)\> x

	generateFieldInit: (idx, className, []) -> []
	generateFieldInit: (idx, className, [Param(ty,name) | tl]) -> <concat>[
		[
			LoadArg("0"),
			LoadArg(idx),
			StoreField(ty, className, name)
		],
		<generateFieldInit> (<addS>(idx, "1"), className, tl)
		]

	generateBaseInit: baseType -> <concat>[[LoadArg("0")], [CallConstructor(baseType)]]
	generateConstructorParamCopy: x -> []
	generateParam: x -> result with
		ty     := <nabl2-get-ast-type;strip-forall;type-to-cil> x;
		name   := <getIdentifierName> x;
		result := Param(ty, name)
	generateConstructor: (className, params, baseType, freeVars) -> result with 
		curried_params := <map(generateParam)> params;
		freeVar_params := <debug(|"q1: ");map(generateParam);debug(|"q3: ")> freeVars;
		all_params     := <concat> [curried_params, freeVar_params];
		body 		   := <concat> 
		[
			<generateBaseInit> baseType,
			<generateFieldInit> ("1", className, all_params),
			[Ret()]
	    ];
		result := Ctor(all_params, body)

	


	
	
	
	listifyExprBlock: ExprBlock(exp, Some(next)) -> <concat> [[exp], <listifyExprBlock> next]
	listifyExprBlock: ExprBlock(exp, None()) -> [exp]
	
	
	
	getFreeVars: (scope, None()) -> [] 
	getFreeVars: (scope, Some(x)) -> <getFreeVars> (scope, x)
	getFreeVars: (scope, ExprBlock(exp, tail)) -> result with  
		args   := <getExprBlockArgs> (scope, exp);
		result := <concat> [<getFreeVars> (scope, exp), <getFreeVars> (<concat> [scope, args], tail)]
	getFreeVars: (scope, BinaryOperation(op, a, b)) -> <concat> [<getFreeVars> (scope, a), <getFreeVars> (scope, b)]
	getFreeVars: (scope, Const(_)) -> []
	getFreeVars: (scope, x@Identifier(_)) -> <getFreeVar> (scope, x)
	getFreeVars: (scope, Application(a,b)) -> <concat> [<getFreeVars> (scope, a), <getFreeVars> (scope, b)]
	getFreeVars: (scope, Let(name,args,retTy,body)) -> result with
		newscope := <concat> [args, scope];
		result   := <getFreeVars> (newscope, body)
	
	getExprBlockArgs: (scope, l@Let(_, _, _, _)) -> [l]
	getExprBlockArgs: (scope, l@LetRec(_, _, _, _)) -> [l]
	getExprBlockArgs: (scope, l@LetConst(_, _, _)) -> [l]
	getExprBlockArgs: (scope, _) -> []
	
	

	// helpers for getIdentifierIndex.
	indexOf: ([]        , var, idx) -> -1
	indexOf: ([var | tl], var, idx) -> idx
	indexOf: ([_   | tl], var, idx) -> <indexOf> (tl, var, <add> (idx, 1))
	// returns the index of var in the list vars, or -1 if not present. Uses only the name in the identifier.
	getIdentifierIndex: (vars, var) -> result with
		var_names := <map(getIdentifierName;strip-annos)> vars;
		var_name  := <getIdentifierName;strip-annos> var;
		result 	  := <indexOf> (var_names, var_name, 0)
		
	getFreeVar: (vars, var) -> result with 
		var_names := <debug(|"b3: ");map(getIdentifierName);debug(|"b4: ")> vars;
		var_name := <debug(|"b5: ");getIdentifierName;debug(|"b6: ")> var;
		if <strip-annos;elem> (var_name, var_names) then result := [] else result := [var] end
 
		