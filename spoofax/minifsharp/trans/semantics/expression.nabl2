module expression

imports

  	signatures/-
  	static-semantics
  	expression-block
  	expression-logic
  	expression
  	let
  	map
  	pattern
  	type
  	
rules

	// Identifier rules
	    
  	[[ Identifier(id) ^ (s) : ty]] :=
	  	Const{id} -> s, 
	  	Const{id} |-> d,
	  	d : ty.
	
  	[[ TypeConstIdentifier(id) ^ (s) : ty]] :=
	  	Const{id} -> s, 
	  	Const{id} |-> d,
	  	d : ty.

	// List and tuples rules

	[[ EmptyList() ^ (s) : ty ]].
	
	[[ Concat(a,b) ^ (s) : List(ty) ]] 	:= 
		[[ a ^ (s) : ty ]],
		[[ b ^ (s) : List(ty) ]].
        	
	[[ ExpTuple(plist) ^ (s) : Tuple(ty) ]] := Map1T [[ plist ^ (s) : ty]].

	// Application type rules

	[[ Application(x@Identifier(_), e2) ^ (s) : funcRetTy ]] := 
	    [[ x ^ (s) : ty ]],
	    ty2 instOf ty,
	    ty2 == Function(argTy, funcRetTy),
	    [[ e2 ^ (s) : argTy ]].
  
  	[[ Application(e1, e2) ^ (s) : funcRetTy ]] := 
	    [[ e1 ^ (s) : Function(argTy, funcRetTy) ]],
	    [[ e2 ^ (s) : argTy ]].
	    