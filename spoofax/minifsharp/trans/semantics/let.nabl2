module let

imports

  	signatures/-
  	static-semantics
  	expression-block
  	expression-logic
  	expression
  	let
  	map
  	pattern
  	type

rules

	// Let Rules

  	[[ a@Let(NonRecursive(), id, args, retTy, body) ^ (s, s') : argCurried2 ]] := 
		GetSpecifiedRetTy [[ retTy ^ (s_body) : ty ]],
		new s_body, 
		s_body -P-> s,
	    InnerExprBlock[[ body ^ (s_body, _, _) : ty]],
	    MapCurry [[ args ^ (s_body, ty) : argCurried ]],
	    argCurried2 genOf(vars) argCurried,
		Const{id}.origin := a, 
		Const{id} <- s',
		Const{id} : argCurried2.

  	[[ a@Let(Recursive(), id, args, retTy, body) ^ (s, _) : argCurried2 ]] := 
    	GetSpecifiedRetTy [[ retTy ^ (s_body) : retTyp ]],
    	new s_body, 
    	s_body -P-> s,	
	    InnerExprBlock[[ body ^ (s_body, _, _) : retTyp]],
		MapCurry [[ args ^ (s_body, retTyp) : argCurried ]],
		argCurried2 genOf(vars) argCurried,
		Const{id}.origin := a, 
		Const{id} <- s,
		Const{id} : argCurried2.
    
  	[[ a@LetConst(id, retTy, body) ^ (s, s') : ty ]] := 
		GetSpecifiedRetTy [[ retTy ^ (s_body) : ty ]],
		new s_body, 
		s_body -P-> s,
		Const{id}.origin := a, 
		Const{id} <- s',
		Const{id} : ty,
	    InnerExprBlock[[ body ^ (s_body, _, _) : ty]].
	    
	// Function argument types
	
  	[[ a@Argument(id, None()) ^ (s) : ty ]] := 
	    Const{id} <- s,
	    Const{id} : ty,
	    Const{id}.origin := a.
	    
  	[[ a@Argument(id, Some(typ)) ^ (s) : ty ]] := 
  		[[ typ ^ (s) : ty ]],
	  	Const{id} <- s,
	  	Const{id} : ty,
	  	Const{id}.origin := a.

  	// Function return types
   
	GetSpecifiedRetTy [[ None() ^ (s) : ty ]] := true.		 	// No return type specified; no additional constraint
	GetSpecifiedRetTy [[ Some(ReturnType(x)) ^ (s) : ty ]] :=  	// Additional constraint: the function should return the specified type
  		[[ x ^ (s) : ty ]].
  		