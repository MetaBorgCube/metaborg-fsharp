module static-semantics

imports

  signatures/-

signature

  types
    Int()
    Bool()
    
  name resolution

    labels
      P I

    order
      D < I,
      D < P,
      I < P

    well-formedness
	  (P* . I*)

rules

  init ^ (s) := new s.

  [[ Program(expBlock, main) ^ (s) ]] :=
	new mainscope,
  	ProgramExp [[ expBlock ^ (s, mainscope) : ty]],
  	[[ main ^ (s, mainscope) : ty2]],
  	true.

  ProgramExp[[ Some(block @ ExprBlock(_, _)) ^ (s, mainscope) : ty ]] :=
  	ProgramExp[[ block ^ (s, mainscope) : ty]].
  	
  ProgramExp[[ None() ^ (s, mainscope) : ty ]] :=
    mainscope -P-> s,
    true.
	
  ProgramExp[[ ExprBlock(LetExp(x), next) ^ (s, mainscope) : ty ]] := 
  	new s',
  	s' -P-> s,
	[[ x ^ (s, s') : ty1]],
	ProgramExp[[ next ^ (s', mainscope) : ty2 ]].
	
  ProgramExp[[ ExprBlock(exp, next) ^ (s, mainscope) : ty ]] := 
	[[ exp ^ (s) : ty1 ]],
	ProgramExp[[ next ^ (s, mainscope) : ty2 ]].
	
  [[ ExprBlock(exp, None()) ^ (s) : ty]] := 
	[[ exp ^ (s) : ty ]].
	
  [[ ExprBlock(exp, Some(next)) ^ (s) : ty]] := 
	[[ exp ^ (s) : ty1 ]],
	[[ next ^ (s) : ty ]].

  [[ Let(id, args, retTy, body) ^ (s, s') : ty ]] := 
	Const{id} <- s',
    [[ body ^ (s) : ty]].
    
  [[ LetRec(id, args, retTy, body) ^ (s, s') ]] := 
	Const{id} <- s',
    [[ body ^ (s') ]].

  [[ Identifier(id) ^ (s) : ty]] :=
  	Const{id} -> s, 
  	Const{id} |-> d.
  
  [[ Const(v) ^ (s) : ty]] :=
    [[ v ^ (s) : ty]].
  
  [[ Integer(x) ^ (s) : Int()]] :=
   true.
   
  [[ Bool(x) ^ (s) : Bool()]] :=
   true.
   
  [[ BinaryOperation(PlusOp(), a,b) ^ (s) : ty ]] := [[ a ^ (s) : Int() ]], [[ b ^ (s) : Int() ]].
  [[ BinaryOperation(MinOp() , a,b) ^ (s) : ty ]] := [[ a ^ (s) : Int() ]], [[ b ^ (s) : Int() ]].
  [[ BinaryOperation(MultOp(), a,b) ^ (s) : ty ]] := [[ a ^ (s) : Int() ]], [[ b ^ (s) : Int() ]].
  [[ BinaryOperation(ConcatOp(), a,b) ^ (s) : ty ]] := [[ a ^ (s) : c ]], [[ b ^ (s) : c ]].
  [[ BinaryOperation(AndOp(), a,b) ^ (s) : ty ]] := [[ a ^ (s) : Bool() ]], [[ b ^ (s) : Bool() ]].
  [[ BinaryOperation(OrOp(), a,b) ^ (s) : ty ]] := [[ a ^ (s) : Bool() ]], [[ b ^ (s) : Bool() ]].

  
  [[ None() ^ (s) ]] :=
    true.
    
  
    
    
