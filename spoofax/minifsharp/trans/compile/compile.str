module compile

imports

  libstratego-gpp
  libspoofax/stratego/debug
  libstratego-lib
  src-gen/signatures/-
  nabl2/api
  pp
  desugar/desugar
  minifsharp
  src-gen/nabl2/static-semantics
  compile/pattern-matching
  compile/helper-funcs
  
strategies
	
	external strategy-generate-cil(|path)
	external strategy-run-cil(|path)

signature constructors
	
	Output: String * String -> Term
	
rules

	
	generate-exe: (selected, position, ast, path, project-path) -> (filename, result) with
		filename 	:= <guarantee-extension(|"result.log")> path;
		(cname, _) 	:= <show-cil; file-store> (selected, position, ast, path, project-path);
		result		:= <strategy-generate-cil(|path); process-output> cname
		
	run-exe: (selected, position, ast, path, project-path) -> (filename, result) with
		filename 	:= <guarantee-extension(|"result.txt")> path;
		(cname, _) 	:= <show-cil; file-store> (selected, position, ast, path, project-path);
		result		:= <strategy-run-cil(|path); process-output> cname
	
	show-cil: (selected, _, ast, path, project-path) -> (filename, result) with
	    filename    := <guarantee-extension(|$[cil])> path;
		result      := <desugar-all; program-to-cil;  pp-debug> ast
		
	file-store: (filename, result) -> (filename, result) with
		f := <fopen> (filename, "w");
	    <fputs> (result, f);
	    <fclose> f
		
	program-to-cil: Program(e,l@Let(_,a,b,c,d)) -> result with
		wildcardVars := <getNamedWildcars;map(nabl2-get-ast-type; strip-forall; type-to-cil)> d; 
		result       := ProgramCil(<concat> [[Method(IntType(), a, None(), [], LocalDefs(wildcardVars), <exprBlock-to-cil> (d, (l, [])))], <nonEntryPoints-to-cil> e], a)
		 
	nonEntryPoints-to-cil: None() -> []
	nonEntryPoints-to-cil: Some(x) -> <listifyExprBlock; map(definitions-to-cil); concat> x
	
	process-output: Output(result, "") -> result

	process-output: Output(result, error) -> $[[result] Runtime error: [error]]
		where not (<""> error)
	
// Application	
	
	exp-to-cil: (z@Application(a@Identifier(name),b), context) -> result with
		if <getOrigin; ?Let(_,_,_,_,_)> a then
			result := <functionApplication-to-cil>(z, context)
		else
			result := <typeConstructorApplication-to-cil>(z, context)
		end
	
	// first application: a is an identifier, hence need to call constructor with free vars as parameters	
	functionApplication-to-cil: (z@Application(a@Identifier(name),b), context) -> result with
		funTy 	 	 := <nabl2-get-ast-type;strip-forall> a;
		loadFunc 	 := <loadFunction> (a, context);
		loadArg      := <exp-to-cil> (b, context);
		invokeFunc   := [CallVirt(<type-to-cil> funTy)];
		result       :=  <concat> [
			loadFunc, 
			loadArg, 
			invokeFunc
		]
	
	// not the first application: a is not an identifier, hence no need to call constructor with free vars as parameters
	exp-to-cil: (z@Application(a,b), context) -> result with
		funTy  := <nabl2-get-ast-type;strip-forall> a;
		result :=  <concat> [<exp-to-cil> (a, context), <exp-to-cil> (b, context), [CallVirt(<type-to-cil> funTy)]]
		
	typeConstructorApplication-to-cil: (z@Application(a@Identifier(name),b), context) -> result with
		ty 	 	 	 := <nabl2-get-ast-type;type-to-cil> b;
		loadArg      := <exp-to-cil> (b, context);
		newObj 		 := [NewObj(<localClass> name, [ty])];
		result       := <concat>[
			loadArg,
			newObj
		]
		
	loadFunction: (a@Identifier(name), context) -> result with
		targetFunc   := <getOrigin> a;
		freeVars     := <getFreeVars> targetFunc;
		loadFreeVars := <mapconcat(\x->(x, context)\;exp-to-cil)> freeVars;
		freeVarTys   := <map(nabl2-get-ast-type)> freeVars;
		callCtor     := [NewObj(<concat-strings;localClass> [name, "_0"], <map(type-to-cil)> freeVarTys)];
		result 	  	 := <concat> [loadFreeVars, callCtor]
	


// Let Const
		
	loadLetConst: (a@Identifier(name), context) -> result with
		targetFunc   := <getOrigin> a;
		constTy		 := <nabl2-get-ast-type;strip-forall> a;
		freeVars     := <getFreeVars> targetFunc;
		loadFreeVars := <mapconcat(\x->(x, context)\;exp-to-cil)> freeVars;
		freeVarTys   := <map(nabl2-get-ast-type; type-to-cil)> freeVars;
		constName    := <concat-strings> ["get_", name];
		call		 := [Call(Static(), <type-to-cil> constTy, ClassType(DefaultModule(), ClassName("Test1"), NonGeneric()), constName, None(), freeVarTys)] ;
		result       := <concat> [
			loadFreeVars,
			call
	 	]
 

// Misc cil-generation

	exprBlock-to-cil: (x, context) -> <listifyExprBlock;mapconcat(\y -> <exp-to-cil> (y, context)\)> x
	
	exp-to-cil: (Const(Integer(x)), context)    -> [Ldc(x)]
	exp-to-cil: (Const(Bool(True())), context)  -> [Ldc("1")]
	exp-to-cil: (Const(Bool(False())), context) -> [Ldc("0")]
	
	exp-to-cil: (BinaryOperation(op, a, b), context) -> <concat> [<exp-to-cil> (a, context), <exp-to-cil> (b, context), <binop-to-cil> op]
	binop-to-cil: PlusOp()    -> [Add()]
	binop-to-cil: MinOp()     -> [Sub()]
	binop-to-cil: MultOp()    -> [Mul()]
	binop-to-cil: EqualOp()   -> [Ceq()]
	binop-to-cil: SmallerOp() -> [Clt()]	
	binop-to-cil: OrOp()      -> [Or()]  // Note: bitwise or.  Should be OK since bools are always 0 or 1
	binop-to-cil: AndOp()     -> [And()] // Note: bitwise and. Should be OK since bools are always 0 or 1	
	
	exp-to-cil: (v@Identifier(name), context) -> <loadVar> (<getOrigin> v, v, context)
		
	// loadVar: origin, identifier, context
	loadVar: (Let(_,_,_,_,_), identifier, context)         			-> <loadFunction> (identifier, context)
	loadVar: (LetConst(_,_,_), identifier, context)        			-> <loadLetConst> (identifier, context)
	loadVar: (TypeConstIdentifier(_), Identifier(name), context) 	-> [NewObj(<localClass> name, [])]
	loadVar: (_, identifier, context@(func, wildcardDefs)) -> result with
		wildcardIdx := < getIdentifierIndex> (wildcardDefs, identifier);
		if <lt> (wildcardIdx, 0) then
			freeVarIdx := <getIdentifierIndex> (<getFreeVars> func, identifier);
			paramIndex := <getIdentifierIndex> (<getLetArgs>  func, identifier);
			numParams  := <getLetArgs;length> func;
			// set argIdx to the index of the identifier in the sequence [param1, ..., paramn, freeVar1, ..., freeVarn] 
			if <lt> (freeVarIdx, 0) then argIdx := paramIndex else  argIdx := <add> (numParams, freeVarIdx) end; 
			result := [LoadArg(<int-to-string> argIdx)]	// load freevar or param
		else 
			result := [LoadLocal(<int-to-string> wildcardIdx)] 				// load wildcard
		end	
	
	exp-to-cil: (Let(_,_,_,_,_), context) -> [] // functions are compiled elsewhere; don't try to compile them into other function bodies
	exp-to-cil: (LetConst(_,_,_), context) -> []
	
	exp-to-cil: (c@ExpTuple(l), context) -> result with
		items    := <mapconcat(\x -> <exp-to-cil> (x, context)\)> l;
		paramTys := <length; range; map(\x -> ArgType1(<int-to-string>x)\)> l;
		ctor     := [NewObj(<nabl2-get-ast-type;type-to-cil> c, paramTys)];
		result   := <concat> [items, ctor]
		
	exp-to-cil: (c@Concat(a,b), context) -> result with
		cilA       := <exp-to-cil> (a, context);
		cilB       := <exp-to-cil> (b, context);
		cilClassTy := ClassType(Module("FSharp.Core"), ClassName("Microsoft.FSharp.Collections.FSharpList"), GenericClassTypeArgs("1", [ArgType1("0")]));
		call       := Call(Static(), cilClassTy, <nabl2-get-ast-type;type-to-cil>c, "Cons", None(), [ArgType1("0"), cilClassTy]);
		result     := <concat> [cilA, cilB, [call]] 
	exp-to-cil: (c@EmptyList(), context) -> result with
		cilClassTy := ClassType(Module("FSharp.Core"), ClassName("Microsoft.FSharp.Collections.FSharpList"), GenericClassTypeArgs("1", [ArgType1("0")]));
		result     := [Call(Static(), cilClassTy, <nabl2-get-ast-type;type-to-cil>c, "get_Empty", None(), [])]

	definitions-to-cil: a @ Let(recursiveType, name,args,retTy,body) -> result with 
		tmp 	   	 := <nabl2-get-ast-type; strip-forall> a;
		returnType 	 := <ret-type-to-cil> (tmp, <length> args);
		argTypes 	 := <map(\x -> <arg-type-to-cil> (tmp, <getIdentifierName> x, args)\)> args;
		genericTypes := <getOptionalGenericVars> tmp;
		freeVars 	 := <getFreeVars> a;
		freeVarTypes := <map(nabl2-get-ast-type; strip-forall; type-to-cil)> freeVars;
		allArgTypes  := <concat>  [argTypes, freeVarTypes];
		wildcardVars := <getNamedWildcars;map(nabl2-get-ast-type; strip-forall; type-to-cil)> body; 
		method 		 := Method(returnType, name, genericTypes, allArgTypes, LocalDefs(wildcardVars), <exprBlock-to-cil> (body, (a, [])));
		curriedFunc  := <curriedFunction-to-cil> (tmp, tmp, name, [], args, freeVars);
		result 	 	 := <concat> [[method], curriedFunc, <listifyExprBlock;mapconcat(definitions-to-cil)> body]
		
	definitions-to-cil: a @ LetConst(name,retTy,body) ->  result with 
		tmp 	   	 := <nabl2-get-ast-type; strip-forall> a;
		returnType 	 := <type-to-cil> tmp;
		genericTypes := <getOptionalGenericVars> tmp;
		freeVars 	 := <getFreeVars> a;
		freeVarTypes := <map(nabl2-get-ast-type; strip-forall; type-to-cil)> freeVars;
		wildcardVars := <getNamedWildcars;map(nabl2-get-ast-type; strip-forall; type-to-cil)> body; 
		method 		 := Method(returnType, name, genericTypes, freeVarTypes, LocalDefs(wildcardVars), <exprBlock-to-cil> (body, (a, [])));
		curriedFunc  := <curriedFunction-to-cil> (tmp, tmp, name, [], [], freeVars);
		result 	 	 := <concat> [[method], curriedFunc, <listifyExprBlock;mapconcat(definitions-to-cil)> body]

	// Generate for e.g. type Q = A of int | B of bool
	// - class Q {int Tag; bool EqualTypes (int32 otherTag);}
	// - class A : Q { int Value; public A(int value){Tag = 0; this.Value = value;} public static int getTag() {return 0;}}
	// - class B : Q { bool Value; public A(bool value){Tag = 1; this.Value = value;} public static int getTag() {return 1;}}
	definitions-to-cil: TypeDefinition(name, Union(l)) -> result with 
		match      := <newname> "typecheck_match_";
		classTy    := <localClass> name;
		typeCmp    := [
			LoadArg("0"),
			LoadField(IntType(), classTy, "Tag"),
			LoadArg("1"),
			Beq(LabelRef(match)),
			Ldc("0"),
			Ret(),
			Label(match),
			Ldc("1"),
			Ret()
		];
		baseClass  := UnionClass(name, None(), [Field(IntType(), "Tag")], DefaultCtor(), IntType(), typeCmp);
		subclasses := <number(id); mapconcat(\(typedId, idx) -> <unionSubclass-to-cil> (typedId, idx, classTy)\)> l;
		result     := <concat>[[baseClass], subclasses]
	
	definitions-to-cil: _ -> []
	
	unionSubclass-to-cil: (TypeConstIdentifier(name), idx, parent) -> result with
		varTyCil := <localClass> name;
		ctorBody := <concat>[
			<generateBaseInit> parent,
			[LoadArg("0"), Ldc(<int-to-string> idx), StoreField(IntType(), parent, "Tag")]			
		];
		ctor     := Ctor([], ctorBody);
		cmpBody  := [Ldc(<int-to-string> idx)];
		result   := [UnionSubtypeClass(name, None(), parent, [], ctor, cmpBody)]
				
	unionSubclass-to-cil: (TypedID(name, ty), idx, parent) -> result with 
		cilTy    := < nabl2-get-ast-type; type-to-cil> ty;
		varTyCil := <localClass> name;
		ctorBody := <concat>[
			<generateBaseInit> parent,
			<generateFieldInit> ("1", name, [Param(cilTy, "Value")]),
			[LoadArg("0"), Ldc(<int-to-string> idx), StoreField(IntType(), parent, "Tag")]			
		];
		ctor    := Ctor([Param(cilTy, "x")], ctorBody);
		cmpBody := [Ldc(<int-to-string> idx)];
		result  := [UnionSubtypeClass(name, None(), parent, [Field(cilTy, "Value")], ctor, cmpBody)]

	




	// Generate the classes for the objects that represent functions; one class for each argument of the function. Each class
	// stores all processed arguments and has an Invoke function that creates an object of the next class in the chain.
	curriedFunction-to-cil: (_, _, _, _, [], freeVars) -> []
	curriedFunction-to-cil: (funTy, ty@Function(x,y), name, processedArgs, nextArgs@[argHd | argTl], freeVars) -> result with
		funcName 	 := <concat-strings> [name, "_", <length;int-to-string>processedArgs];
		baseClass 	 := <type-to-cil> ty;
		argFields    := <map(generateField)> processedArgs;
		freeVarFields:= <map(generateField; \Field(a,b) -> Field(a, <getFreeVarName> b)\)> freeVars;
		allFields    := <concat> [argFields, freeVarFields];
		ctor 		 := <generateConstructor> (funcName, processedArgs, baseClass, freeVars);
		retTy 		 := <type-to-cil> y;
		argTy        := <type-to-cil> x;
		instructions := <generateInvokeImplementation> (funTy, name, processedArgs, nextArgs, freeVars);
		genericVars  := <getOptionalGenericVars> funTy;
		function     := FunctionDefinition(funcName, genericVars, baseClass, allFields, ctor, retTy, argTy, instructions);
		nextFunction := <curriedFunction-to-cil> (funTy, y, name, <concat> [processedArgs, [argHd]], argTl, freeVars);
		result 		 := <concat> [[function], nextFunction] 
	
	// call the next object in the chain. For the last object in the chain, call the actual function.
	generateInvokeImplementation: (funTy, className, processed, nextArgs@[nextArg|_], freeVars) -> result with
		objName         := <concat-strings> [className, "_", <length;int-to-string> processed];
		loadCurriedArgs := <loadFields> (processed, funTy, objName);
		loadFreeVars    := <loadFreeVars> (<concat-strings> [className, "_", <length;int-to-string> processed], freeVars);
		argTys          := <concat;map(nabl2-get-ast-type;type-to-cil)> [processed, [nextArg]];
		freeVarTys      := <map(nabl2-get-ast-type;type-to-cil)> freeVars;
		tys             := <concat> [argTys, freeVarTys];
		if <lt> (<length>nextArgs, 2) then 
			funcName    := <concat-strings> ["get_", className];
			callNext    := [Call(Static(), <ret-type-to-cil> (funTy, <length>tys), ClassType(DefaultModule(), ClassName("Test1"), NonGeneric()), funcName, None(), tys), Ret()] 
		else 
			callNext    := [NewObj(<concat-strings;localClass> [className, "_", <addS> ("1", <length;int-to-string> processed)], tys)]
		end;
		result          := <concat> [
			loadCurriedArgs,
			[LoadArg("1")],
			loadFreeVars,
			callNext
	 	]
	 	
	loadField: (processed, funTy, className, identifierName) -> result with 
		fldType := <arg-type-to-cil> (funTy,identifierName, processed);
		result  := [LoadArg("0"), LoadField(fldType, <localClass> className, identifierName)] 
	loadFields: (processed, funTy, className) -> <mapconcat(\x -> <loadField> (processed, funTy, className, <getIdentifierName> x)\)> processed

	loadFreeVar: (className, freeVar) -> result with
		ty        := <nabl2-get-ast-type; type-to-cil> freeVar;
		fieldName := <getIdentifierName;getFreeVarName> freeVar;
		result    := [LoadArg("0"), LoadField(ty, <localClass>className, fieldName)]
	loadFreeVars: (className, freeVars) -> <mapconcat(\x -> (className, x)\; loadFreeVar)> freeVars
	
	

 

 
 	// a field is a param, but named differently..
	generateField: x -> <generateParam; \Param(a,b) -> Field(a,b)\> x

	generateFieldInit: (idx, className, []) -> []
	generateFieldInit: (idx, className, [Param(ty,name) | tl]) -> <concat>[
		[
			LoadArg("0"),
			LoadArg(idx),
			StoreField(ty, <localClass>className, name)
		],
		<generateFieldInit> (<addS>(idx, "1"), className, tl)
		]

	generateBaseInit: baseType -> <concat>[[LoadArg("0")], [CallConstructor(baseType)]]
	generateParam: x -> result with
		ty     := <nabl2-get-ast-type;strip-forall;type-to-cil> x;
		name   := <getIdentifierName> x;
		result := Param(ty, name)
	generateConstructor: (className, params, baseType, freeVars) -> result with 
		curried_params := <map(generateParam)> params;
		freeVar_params := <map(generateParam; \Param(ty,name) -> Param(ty, <getFreeVarName>name)\)> freeVars;
		all_params     := <concat> [curried_params, freeVar_params];
		body 		   := <concat> 
		[
			<generateBaseInit> baseType,
			<generateFieldInit> ("1", className, all_params),
			[Ret()]
	    ];
		result := Ctor(all_params, body)

		

